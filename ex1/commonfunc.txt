GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> let l = "Joloinen Irma"
Prelude> length l
13
Prelude> :t l
l :: [Char]
Prelude> :t map (chr . (+5) . ord)

<interactive>:1:6: Not in scope: `chr'

<interactive>:1:19:
    Not in scope: `ord'
    Perhaps you meant one of these:
      `odd' (imported from Prelude), `or' (imported from Prelude)
Prelude> import Data.Char
Prelude Data.Char> :t map (chr . (+5) . ord)
map (chr . (+5) . ord) :: [Char] -> [Char]
Prelude Data.Char> map (chr . (+5) . ord) l
"Otqtnsjs%Nwrf"
Prelude Data.Char> import Data.List
Prelude Data.Char Data.List> foldr (\a b -> a + ord b) 0 l

<interactive>:10:24:
    Couldn't match expected type `Char' with actual type `Int'
    In the first argument of `ord', namely `b'
    In the second argument of `(+)', namely `ord b'
    In the expression: a + ord b

<interactive>:10:29:
    Couldn't match type `Char' with `Int'
    Expected type: [Int]
      Actual type: [Char]
    In the third argument of `foldr', namely `l'
    In the expression: foldr (\ a b -> a + ord b) 0 l
    In an equation for `it': it = foldr (\ a b -> a + ord b) 0 l
Prelude Data.Char Data.List> foldl (\a b -> a + ord b) 0 l
1255
Prelude Data.Char Data.List> sum $ map ord l
1255
Prelude Data.Char Data.List> let k = zipWith (,) l $ cycle [1,2,3]
Prelude Data.Char Data.List> k
[('J',1),('o',2),('l',3),('o',1),('i',2),('n',3),('e',1),('n',2),(' ',3),('I',1),('r',2),('m',3),('a',1)]
Prelude Data.Char Data.List> map fst $ filter ((==2).snd) k
"oinr"
Prelude Data.Char Data.List> import Data.Map
Prelude Data.Char Data.List Data.Map> fromList k :: Map Char Int

<interactive>:17:10:
    Couldn't match type `Integer' with `Int'
    Expected type: [(Char, Int)]
      Actual type: [(Char, Integer)]
    In the first argument of `fromList', namely `k'
    In the expression: fromList k :: Map Char Int
    In an equation for `it': it = fromList k :: Map Char Int
Prelude Data.Char Data.List Data.Map> fromList k :: Map Char Integer
Loading package array-0.4.0.1 ... linking ... done.
Loading package deepseq-1.3.0.1 ... linking ... done.
Loading package containers-0.5.0.0 ... linking ... done.
fromList [(' ',3),('I',1),('J',1),('a',1),('e',1),('i',2),('l',3),('m',3),('n',2),('o',1),('r',2)]
Prelude Data.Char Data.List Data.Map> let ls = fromList k :: Map Char Integer
Prelude Data.Char Data.List Data.Map> size ls
11
Prelude Data.Char Data.List Data.Map> lookup 'l' ls

<interactive>:21:1:
    Ambiguous occurrence `lookup'
    It could refer to either `Data.Map.lookup',
                             imported from `Data.Map'
                             (and originally defined in `containers-0.5.0.0:Data.Map.Base')
                          or `Prelude.lookup',
                             imported from `Prelude' (and originally defined in `GHC.List')
Prelude Data.Char Data.List Data.Map> Data.Map.lookup 'l' ls
Just 3
Prelude Data.Char Data.List Data.Map> mapWithKey (\k v -> chr $ v + ord k) ls

<interactive>:23:38:
    Couldn't match type `Integer' with `Int'
    Expected type: Map Char Int
      Actual type: Map Char Integer
    In the second argument of `mapWithKey', namely `ls'
    In the expression: mapWithKey (\ k v -> chr $ v + ord k) ls
    In an equation for `it':
        it = mapWithKey (\ k v -> chr $ v + ord k) ls
Prelude Data.Char Data.List Data.Map> :t ls
ls :: Map Char Integer
Prelude Data.Char Data.List Data.Map> :t chr
chr :: Int -> Char
Prelude Data.Char Data.List Data.Map> mapWithKey (\k v -> chr $ fromIntegral $ v + ord k) ls

<interactive>:26:53:
    Couldn't match type `Integer' with `Int'
    Expected type: Map Char Int
      Actual type: Map Char Integer
    In the second argument of `mapWithKey', namely `ls'
    In the expression:
      mapWithKey (\ k v -> chr $ fromIntegral $ v + ord k) ls
    In an equation for `it':
        it = mapWithKey (\ k v -> chr $ fromIntegral $ v + ord k) ls
Prelude Data.Char Data.List Data.Map> mapWithKey (\k v -> chr $ fromIntegral v + ord k) ls
fromList [(' ','#'),('I','J'),('J','K'),('a','b'),('e','f'),('i','k'),('l','o'),('m','p'),('n','p'),('o','p'),('r','t')]
Prelude Data.Char Data.List Data.Map>
