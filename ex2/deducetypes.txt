Any type name is bound only withing the <> -brackets

Notation is what it is, since the double <> -brackets are 
somewhat burdensome to write (or copy/paste)


a)

<[String] -> String> . <(a -> b) -> [a] -> [b]> <String -> String> . <String -> [String]>
== Apply map
<[String] -> String> . <[String] -> [String]> . <String -> [String]>
== Apply function
<[String] -> String> .  <String -> [String]>
== Once more
<String -> String>

b)

--Of course length returns an integral. Why an Int and not an Integer, that's the question.

<String> -> <Ord a => [a] -> a> ( <(a -> b) -> [a] -> [b]> <[a] -> Int> (<String -> [String]> <String>))
== Apply words and map
<String> -> <Ord a => [a] -> a> ([[a]] -> [Int]> <[String]>)
== Since String = [Char], [String] fits [[a]] when a = Char
== Apply function
<String> -> <Ord a => [a] -> a> <[Int]>
== Apply one more time, noting that Int is an instance of Ord, and moving things around:
<String -> Int> 

c)

--I'm quite sure something about this logic is fishy,
-- the type class-requirements seem to appear from nothing in my deductions.

<a> -> <a> -> <Ord a => a -> a -> a> <Num a => a> (<Ord a => a -> a -> a> <a> <a>)
== Apply function
<a> -> <a> -> <Ord a => a -> a -> a> <Num a => a> <Ord a => a>
== Again. Now that max requires the types to be the same, the stricter Num requirement 
== bounds both variables.
<a> -> <a> -> <(Ord a, Num a) => a>
== Move things around:
<(Ord a, Num a) => a -> a -> a>