
data BinaryTree a 
 = Tip | 
   Branch a
           (BinaryTree a)
           (BinaryTree a)

instance Functor BinaryTree where
  fmap _ Tip             = Tip                                 -- 1. func
  fmap f (Branch el l r) = Branch (f el) (fmap f l) (fmap f r) -- 2. func

-- proof for 1. functor law  | fmap id = id |

fmap id Tip             == Tip      -- 1. func
                        == id Tip   -- inv 1. func

fmap id (Branch el l r) == Branch (id el) (fmap id l) (fmap id r)  -- 2. func
                        == Branch el (fmap id l) (fmap id r)       -- definition of id
-- by induction assume fmap id works for l and r 
                        == id (Branch el l r)

-- proof for 2. functor law  | fmap (f . g) = (fmap f) . (fmap g) |

fmap (f . g) Tip        == Tip                 -- 1. func
                        == fmap g Tip          -- inv 1. func
                        == fmap f (fmap g Tip) -- inv 1. func

fmap (f . g) (Branch el l r) == Branch ((f . g) el ) (fmap (f . g) l) (fmap (f . g) r)
-- by induction assume that   fmap (f . g) == (fmap f) . (fmap g) for l and r
                             == Branch ((f . g) el ) ((fmap f).(fmap g) l) ((fmap f).(fmap g) r)
                             == fmap f (Branch (g el) (fmap g l) (fmap g r))  -- inv 2. func
                             == ((fmap f) . (fmap g)) (Branch el l r)         -- inv 2. func
                              

